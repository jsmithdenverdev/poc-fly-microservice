version: '3'

vars:
  API_URL: http://localhost:8080
  FLY_APP_NAME: '{{default "poc-fly-microservice" .FLY_APP_NAME}}'

tasks:
  default:
    deps: [dev]

  dev:
    desc: Start the development environment
    cmds:
      - docker-compose up --build

  dev:down:
    desc: Stop and remove development containers
    cmds:
      - docker-compose down

  dev:clean:
    desc: Stop containers and remove volumes
    cmds:
      - docker-compose down -v

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  health:
    desc: Check service health
    cmds:
      - curl -s {{.API_URL}}/health | jq '.'

  create:item:
    desc: Create a new item
    vars:
      API_URL: '{{default "http://localhost:8080" .API_URL}}'
    cmds:
      - echo "{{.CLI_ARGS}}"
      - |
        curl -s -X POST {{.API_URL}}/items \
          -H "Content-Type: application/json" \
          -d '{"name":"{{.CLI_ARGS}}"}' | jq '.'
    requires:
      vars: [CLI_ARGS]
    silent: true

  list:items:
    desc: List all items
    cmds:
      - curl -s {{.API_URL}}/items/ | jq '.'
    silent: true

  build:
    desc: Build Docker image for specified environment (debug/dev/prod)
    cmds:
      - docker build --target {{.TARGET}} -t {{.DOCKER_IMAGE}}:{{.TARGET}} .
    requires:
      vars: [TARGET]

  lint:
    desc: Run linters
    cmds:
      - go vet ./...
      - |
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run
        else
          echo "golangci-lint is not installed"
        fi

  deploy:
    desc: Deploy the application to Fly.io
    cmds:
      - DOCKER_TARGET=final flyctl deploy --app {{.FLY_APP_NAME}}
    preconditions:
      - sh: command -v flyctl
        msg: "flyctl is not installed. Please install it first: https://fly.io/docs/hands-on/install-flyctl/"

  build:local:
    desc: Build the local Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:local -f Dockerfile.local .

  build:dev:
    desc: Build the development Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:dev -f Dockerfile.dev .

  build:prod:
    desc: Build the production Docker image
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:prod -f Dockerfile.prod .
